{"version":3,"sources":["store/game/gameActionsTypes.js","store/game/gameActions.js","api/game-api.js","store/game/gameOperations.js","configs/gameStatuses.js","components/game/ControlPanel/ControlPanel.jsx","components/game/ControlPanel/index.js","components/game/Square/index.js","components/game/Square/Square.jsx","configs/playerTypes.js","components/game/Field/Field.jsx","helpers/getRandomInt.js","components/game/Game/Game.jsx","components/game/Game/index.js","screens/GameScreen.jsx","components/leader-board/Table.jsx","screens/LeaderBoardScreen.jsx","App.jsx","serviceWorker.js","store/game/gameReducers.js","store/rootModule.js","store/index.js","index.js"],"names":["fetchRequest","type","types","fetchError","error","payload","fetchSuccess","setGameConfig","params","setGameStatus","status","updateWinners","winner","setLastWinner","getAvailableSettings","settings","axios","defaults","baseURL","getGameSettings","a","get","res","data","getWinners","setWinner","post","requestGameSettings","dispatch","actions","api","response","message","requestWinners","name","date","Object","freeze","INITIAL","PAUSED","STARTED","FINISHED","buttonTextConfig","PLAY","RESUME","PAUSE","PLAY_AGAIN","ControlPanel","updateGameConfig","mode","props","availableSettings","state","gameMode","playerName","updateGameStatus","newStatus","gameStatus","gameStatuses","onFormSubmit","e","preventDefault","setState","validationPassed","onChange","target","value","onSelect","this","submitButtonText","submitButtonStatusClass","shouldFormFieldsBeDisabled","className","onSubmit","id","disabled","loading","hidden","keys","map","el","key","slice","length","placeholder","maxLength","Component","MapDispatchToProps","gameActions","gameOperations","connect","gameConfig","game","Square","color","animation","onClick","onMouseOver","onAnimationEnd","COMPUTER","USER","colorsConfig","GREY","GREEN","RED","BLUE","fieldSquareStatuses","DEFAULT","HIGHLIGHTED","TAKEN","LOST","animationStatuses","scale","bigScale","fieldSquareConfig","Field","createMatrix","fieldSize","matrix","i","row","j","push","getSquareInMatrix","square","fieldsMatrix","forEach","searchResult","find","elem","Number","replaceSquareInMatrix","newElem","indexOf","replaceSquareProp","prop","newSquare","filterMatrix","filter","filterFunc","filteredArr","arr","onMouseOverSquare","highlightSquare","loseSquare","takeSquare","onSquareClick","highlightedFieldId","checkWinner","allFields","userFields","computerFields","halfOfFields","Math","ceil","playerTypes","runGame","setInterval","finishGame","defaultFields","max","randomFieldId","floor","random","field","delay","pauseGame","clearInterval","intervalId","winnerObj","moment","format","prevProps","newMatrix","gameMessages","beforeStart","gameIsGoing","resumeGame","gameIsWon","gameOver","Game","lastWinner","GameScreen","Table","winners","reverse","mapDispatchToProps","LeaderBoardScreen","App","Boolean","window","location","hostname","match","INITIAL_GAME_CONFIG","combineReducers","GAME_STATUSES","gameReducers","middlewares","applyMiddleware","thunk","enhancer","composeWithDevTools","store","createStore","rootModule","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1d4d112a.chunk.js","sourcesContent":["const FETCH_REQUEST = 'game/FETCH_REQUEST';\nconst FETCH_ERROR = 'game/FETCH_ERROR';\nconst FETCH_SUCCESS = 'game/FETCH_SUCCESS';\nconst SET_GAME_CONFIG = 'game/SET_GAME_CONFIG';\nconst UPDATE_WINNERS = 'game/UPDATE_WINNERS';\nconst SET_LAST_WINNER = 'game/SET_LAST_WINNER';\nconst SET_GAME_STATUS = 'game/SET_GAME_STATUS';\nconst GET_AVAILABLE_SETTINGS = 'game/GET_AVAILABLE_SETTINGS';\n\nexport default {\n  FETCH_REQUEST,\n  FETCH_ERROR,\n  FETCH_SUCCESS,\n  SET_GAME_CONFIG,\n  UPDATE_WINNERS,\n  SET_GAME_STATUS,\n  GET_AVAILABLE_SETTINGS,\n  SET_LAST_WINNER,\n};\n","import types from './gameActionsTypes';\n\nconst fetchRequest = () => ({\n  type: types.FETCH_REQUEST,\n});\n\nconst fetchError = (error) => ({\n  type: types.FETCH_ERROR,\n  payload: error,\n});\n\nconst fetchSuccess = () => ({\n  type: types.FETCH_SUCCESS,\n});\n\nconst setGameConfig = (params) => ({\n  type: types.SET_GAME_CONFIG,\n  payload: params,\n});\n\nconst setGameStatus = (status) => ({\n  type: types.SET_GAME_STATUS,\n  payload: status,\n});\n\nconst updateWinners = (winner) => ({\n  type: types.UPDATE_WINNERS,\n  payload: winner,\n});\n\nconst setLastWinner = (winner) => ({\n  type: types.SET_LAST_WINNER,\n  payload: winner,\n});\n\nconst getAvailableSettings = (settings) => ({\n  type: types.GET_AVAILABLE_SETTINGS,\n  payload: settings,\n});\n\nexport default {\n  fetchRequest,\n  fetchError,\n  fetchSuccess,\n  setGameConfig,\n  setGameStatus,\n  updateWinners,\n  setLastWinner,\n  getAvailableSettings,\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://starnavi-frontend-test-task.herokuapp.com/';\n\nexport const getGameSettings = async () => {\n  const res = await axios.get('/game-settings');\n  return res.data;\n};\n\nexport const getWinners = async () => {\n  const res = await axios.get('/winners');\n  return res.data;\n};\n\nexport const setWinner = async (data) => {\n  const res = await axios.post('/winners', data);\n  return res.data;\n};\n","import * as api from '../../api/game-api';\nimport actions from './gameActions';\n\nconst requestGameSettings = () => async (dispatch) => {\n  dispatch(actions.fetchRequest());\n\n  try {\n    const response = await api.getGameSettings();\n    dispatch(actions.getAvailableSettings(response));\n    dispatch(actions.fetchSuccess());\n  } catch (error) {\n    dispatch(actions.fetchError(error.message));\n  }\n};\n\nconst requestWinners = () => async (dispatch) => {\n  dispatch(actions.fetchRequest());\n\n  try {\n    const response = await api.getWinners();\n    dispatch(actions.updateWinners(response));\n    dispatch(actions.fetchSuccess());\n  } catch (error) {\n    dispatch(actions.fetchError(error.message));\n  }\n};\n\nconst updateWinners = (winner) => async (dispatch) => {\n  dispatch(actions.fetchRequest());\n\n  try {\n    const response = await api.setWinner({\n      winner: winner.name,\n      date: winner.date,\n    });\n    dispatch(actions.setLastWinner(winner.type));\n    dispatch(actions.updateWinners(response));\n    dispatch(actions.fetchSuccess());\n  } catch (error) {\n    dispatch(actions.fetchError(error.message));\n  }\n};\n\nexport default {\n  requestGameSettings,\n  requestWinners,\n  updateWinners,\n};\n","export default Object.freeze({\n  INITIAL: 'initial',\n  PAUSED: 'paused',\n  STARTED: 'started',\n  FINISHED: 'finished',\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './ControlPanel.scss';\nimport { gameActions, gameOperations } from '../../../store/game';\nimport gameStatuses from '../../../configs/gameStatuses';\n\nconst buttonTextConfig = Object.freeze({\n  PLAY: 'Play',\n  RESUME: 'Resume',\n  PAUSE: 'Pause',\n  PLAY_AGAIN: 'Play Again',\n});\n\nclass ControlPanel extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gameMode: '',\n      playerName: '',\n      validationPassed: true,\n    };\n  }\n\n  // Here available game settings are requested from a server.\n  async componentDidMount() {\n    await this.props.requestGameSettings();\n  }\n\n  // This method created a new game config based on selected params by the user\n  updateGameConfig = () => {\n    const params = {\n      mode: this.props.availableSettings[this.state.gameMode],\n      playerName: this.state.playerName,\n    };\n    this.props.setGameConfig(params);\n  };\n\n  // This method defines new game status, based on a previous one\n  // and the new one is passed to redux props.\n  updateGameStatus = () => {\n    let newStatus;\n    switch (this.props.gameStatus) {\n      case gameStatuses.INITIAL:\n      case gameStatuses.PAUSED:\n      case gameStatuses.FINISHED:\n        newStatus = gameStatuses.STARTED;\n        break;\n\n      case gameStatuses.STARTED:\n        newStatus = gameStatuses.PAUSED;\n        break;\n\n      default:\n        newStatus = gameStatuses.INITIAL;\n        break;\n    }\n    this.props.setGameStatus(newStatus);\n  };\n\n  onFormSubmit = (e) => {\n    e.preventDefault();\n    // Simple validation.\n    if (!this.state.gameMode || !this.state.playerName) {\n      this.setState({ validationPassed: false });\n      return;\n    }\n    this.setState({ validationPassed: true });\n    // Updates the game status\n    this.updateGameConfig({ playerName: this.state.playerName });\n    this.updateGameStatus();\n  };\n\n  onChange = async (e) => {\n    await this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  onSelect = async (e) => {\n    await this.onChange(e);\n    // Updates a game config, only if the game has been finished before.\n    if (\n      this.props.gameStatus === gameStatuses.INITIAL ||\n      this.props.gameStatus === gameStatuses.FINISHED\n    ) {\n      this.updateGameConfig();\n    }\n  };\n\n  render() {\n    // Here appearance and behavior of the form elements is defined, depends on\n    // a game status.\n    let submitButtonText, submitButtonStatusClass, shouldFormFieldsBeDisabled;\n    switch (this.props.gameStatus) {\n      case gameStatuses.INITIAL:\n        submitButtonText = buttonTextConfig.PLAY;\n        submitButtonStatusClass = 'start';\n        shouldFormFieldsBeDisabled = false;\n        break;\n\n      case gameStatuses.PAUSED:\n        submitButtonText = buttonTextConfig.RESUME;\n        submitButtonStatusClass = 'start';\n        shouldFormFieldsBeDisabled = true;\n\n        break;\n\n      case gameStatuses.STARTED:\n        submitButtonText = buttonTextConfig.PAUSE;\n        submitButtonStatusClass = 'pause';\n        shouldFormFieldsBeDisabled = true;\n        break;\n\n      case gameStatuses.FINISHED:\n        submitButtonText = buttonTextConfig.PLAY_AGAIN;\n        submitButtonStatusClass = 'start';\n        shouldFormFieldsBeDisabled = false;\n        break;\n\n      default:\n        submitButtonText = buttonTextConfig.PLAY;\n        submitButtonStatusClass = 'start';\n        shouldFormFieldsBeDisabled = false;\n        break;\n    }\n\n    return (\n      <div className=\"control-panel__wrapper\">\n        <form className=\"control-panel\" onSubmit={this.onFormSubmit}>\n          <select\n            id=\"gameMode\"\n            name=\"gameMode\"\n            disabled={this.props.loading || shouldFormFieldsBeDisabled}\n            className={`control-panel__field control-panel__field--select ${\n              this.props.loading || shouldFormFieldsBeDisabled ? 'disabled' : ''\n            }`}\n            value={this.state.gameMode}\n            onChange={this.onSelect}\n          >\n            <option value=\"\" disabled hidden>\n              {this.props.loading ? 'Loading...' : 'Pick game mode'}\n            </option>\n            {!this.props.availableSettings\n              ? []\n              : Object.keys(this.props.availableSettings).map((el) => {\n                  return (\n                    <option className=\"select-option\" value={el} key={el}>\n                      {el.slice(0, el.length - 4)}\n                    </option>\n                  );\n                })}\n          </select>\n          <input\n            type=\"text\"\n            id=\"player-name\"\n            name=\"playerName\"\n            disabled={this.props.loading || shouldFormFieldsBeDisabled}\n            placeholder=\"Please, enter your name\"\n            className={`control-panel__field control-panel__field--input ${\n              this.props.loading || shouldFormFieldsBeDisabled ? 'disabled' : ''\n            }`}\n            maxLength=\"20\"\n            value={this.state.playerName}\n            onChange={this.onChange}\n          />\n          <button\n            type=\"submit\"\n            className={`control-panel__button ${submitButtonStatusClass} ${\n              this.props.loading ? 'disabled' : 'active'\n            }`}\n            disabled={this.props.loading}\n          >\n            {submitButtonText}\n          </button>\n        </form>\n        <p\n          className={`validation-message ${\n            this.state.validationPassed ? 'hide' : 'show'\n          }`}\n        >\n          Please, fill all the fields!\n        </p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gameConfig: state.game.gameConfig,\n  gameStatus: state.game.gameStatus,\n  availableSettings: state.game.availableSettings,\n  loading: state.game.loading,\n});\n\nconst MapDispatchToProps = {\n  setGameConfig: gameActions.setGameConfig,\n  setGameStatus: gameActions.setGameStatus,\n  requestGameSettings: gameOperations.requestGameSettings,\n};\n\nexport default connect(mapStateToProps, MapDispatchToProps)(ControlPanel);\n","import ControlPanel from './ControlPanel';\nexport default ControlPanel;\n","import Square from './Square';\nexport default Square;\n","import React from 'react';\nimport './Square.scss';\n\nexport default function Square({\n  id,\n  color,\n  animation,\n  onClick,\n  onMouseOver,\n  onAnimationEnd,\n}) {\n  return (\n    <div\n      className={`square ${color} ${animation}`}\n      id={id}\n      onClick={onClick}\n      onMouseOver={onMouseOver}\n      onAnimationEnd={onAnimationEnd}\n    />\n  );\n}\n","export default Object.freeze({\n  COMPUTER: 'computer',\n  USER: 'user',\n});\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as moment from 'moment';\nimport Square from '../Square/';\nimport './Field.scss';\nimport gameStatuses from '../../../configs/gameStatuses';\nimport playerTypes from '../../../configs/playerTypes';\nimport { gameActions, gameOperations } from '../../../store/game';\nimport getRandomInt from '../../../helpers/getRandomInt';\n\nconst colorsConfig = Object.freeze({\n  GREY: 'grey',\n  GREEN: 'green',\n  RED: 'red',\n  BLUE: 'blue',\n});\n\nconst fieldSquareStatuses = Object.freeze({\n  DEFAULT: 'default',\n  HIGHLIGHTED: 'highlighted',\n  TAKEN: 'taken',\n  LOST: 'lost',\n});\n\nconst animationStatuses = Object.freeze({\n  scale: 'scale',\n  bigScale: 'bigScale',\n});\n\nconst fieldSquareConfig = {\n  status: fieldSquareStatuses.DEFAULT,\n  animation: '',\n};\n\nclass Field extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fieldsMatrix: [],\n      intervalId: null,\n      highlightedFieldId: null,\n    };\n  }\n\n  // Simply creates the game field\n  createMatrix = (fieldSize) => {\n    const matrix = [];\n    let id = 0;\n    for (let i = 0; i < fieldSize; i++) {\n      let row = [];\n      for (let j = 0; j < fieldSize; j++) {\n        row.push({\n          id: id,\n          ...fieldSquareConfig,\n        });\n        id = ++id;\n      }\n      matrix.push(row);\n    }\n    return matrix;\n  };\n\n  // Creates fields matrix for initial render\n  componentDidMount() {\n    const matrix = this.createMatrix(this.props.gameConfig.mode.field);\n    this.setState({ fieldsMatrix: matrix });\n  }\n\n  componentDidUpdate(prevProps) {\n    // Creates matrix for all subsequent changes in the game's config.\n    if (prevProps.gameConfig.mode.field !== this.props.gameConfig.mode.field) {\n      const matrix = this.createMatrix(this.props.gameConfig.mode.field);\n      this.setState({ fieldsMatrix: matrix });\n    }\n\n    // Checks if, there is a new game to be started, and if so - recreates the game\n    // field matrix.\n    if (\n      (prevProps.gameStatus === gameStatuses.INITIAL ||\n        prevProps.gameStatus === gameStatuses.FINISHED) &&\n      prevProps.gameStatus !== this.props.gameStatus\n    ) {\n      const newMatrix = this.createMatrix(this.props.gameConfig.mode.field);\n      this.setState({ fieldsMatrix: newMatrix, highlightedFieldId: null });\n    }\n\n    // Runs a game, if the game status has been changed to a corresponding one.\n    if (\n      prevProps.gameStatus !== this.props.gameStatus &&\n      this.props.gameStatus === gameStatuses.STARTED\n    ) {\n      const intervalId = this.runGame();\n      this.setState({ intervalId: intervalId });\n    }\n\n    // Pauses the game, if the game status has been changed to a corresponding one.\n    if (\n      prevProps.gameStatus !== this.props.gameStatus &&\n      this.props.gameStatus === gameStatuses.PAUSED\n    ) {\n      this.pauseGame();\n    }\n  }\n\n  // This method searches a fieldMatrix for the neccessary element and returns it.\n  getSquareInMatrix = (id) => {\n    let square;\n    const matrix = [...this.state.fieldsMatrix];\n    matrix.forEach((el) => {\n      const searchResult = el.find((elem) => Number(elem.id) === Number(id));\n      if (searchResult) {\n        square = searchResult;\n        return;\n      }\n    });\n    return square;\n  };\n\n  // This method searches a fieldMatrix for the neccessary element, replaces it\n  // with the new one and updates the component state.\n  replaceSquareInMatrix = async (newElem) => {\n    const matrix = [...this.state.fieldsMatrix];\n    matrix.forEach((el) => {\n      const searchResult = el.find((elem) => Number(elem.id) === Number(newElem.id));\n      if (searchResult) {\n        el[el.indexOf(searchResult)] = newElem;\n        return;\n      }\n    });\n    await this.setState({\n      fieldsMatrix: matrix,\n    });\n  };\n\n  // This method replaces passed prop of a matrix element with the passed id.\n  replaceSquareProp = (id, prop, value) => {\n    const square = this.getSquareInMatrix(id);\n    const newSquare = {\n      ...square,\n      [prop]: value,\n    };\n    this.replaceSquareInMatrix(newSquare);\n  };\n\n  // This method filters matrix fields with the passed value, and returns a new\n  // filtered array, if there is now value returns flattened array of matrix fields.\n  filterMatrix = (filter) => {\n    function filterFunc(elem) {\n      return filter ? elem.status === filter : elem;\n    }\n    let filteredArr = [];\n    this.state.fieldsMatrix.forEach((arr) => {\n      const res = arr.filter(filterFunc);\n      filteredArr = [...filteredArr, ...res];\n    });\n    return filteredArr;\n  };\n\n  // Runs scale animation.\n  onMouseOverSquare = (e) => {\n    this.replaceSquareProp(e.target.id, 'animation', animationStatuses.scale);\n  };\n\n  // Removes animation status.\n  onAnimationEnd = (e) => {\n    this.replaceSquareProp(e.target.id, 'animation', '');\n  };\n\n  // Highlights square with passed id.\n  highlightSquare = (id) => {\n    this.replaceSquareProp(id, 'status', fieldSquareStatuses.HIGHLIGHTED);\n  };\n\n  // Markes square with passed id as taken by computer.\n  loseSquare = (id) => {\n    this.replaceSquareProp(id, 'status', fieldSquareStatuses.LOST);\n  };\n\n  // Markes square with passes id as taken by user.\n  takeSquare = (id) => {\n    this.replaceSquareProp(id, 'status', fieldSquareStatuses.TAKEN);\n  };\n\n  onSquareClick = (e) => {\n    // Runs big scale animation on click.\n    this.replaceSquareProp(e.target.id, 'animation', animationStatuses.bigScale);\n\n    // Checks if the clicked square is highlighted, if so - gives the square\n    // to a user.\n    const square = this.getSquareInMatrix(e.target.id);\n    if (square.status === fieldSquareStatuses.HIGHLIGHTED) {\n      this.takeSquare(square.id);\n      this.setState({ highlightedFieldId: null });\n    }\n  };\n\n  // Check if number of fields, that are taken by user or the ones taken by computer\n  // exceeds the 50% of game field. Returns winner type, if so, or null if there is\n  // no winner yet.\n  checkWinner = () => {\n    const allFields = this.filterMatrix();\n    const userFields = this.filterMatrix(fieldSquareStatuses.TAKEN);\n    const computerFields = this.filterMatrix(fieldSquareStatuses.LOST);\n    const halfOfFields = Math.ceil(allFields.length / 2);\n    if (userFields.length >= halfOfFields) {\n      return playerTypes.USER;\n    }\n    if (computerFields.length >= halfOfFields) {\n      return playerTypes.COMPUTER;\n    }\n    return null;\n  };\n\n  // Creates new game session interval.\n  runGame = () => {\n    const gameIteration = async () => {\n      // If there is a highlighted field, from the previous iteration - gives\n      // it to computer.\n      if (this.state.highlightedFieldId !== null) {\n        await this.loseSquare(this.state.highlightedFieldId);\n      }\n\n      // Checks if there is a winner, and if so - finish the game.\n      const winner = this.checkWinner();\n      if (winner) {\n        this.finishGame(winner);\n        return;\n      }\n\n      // Highlightes random square among the default ones.\n      const defaultFields = this.filterMatrix(fieldSquareStatuses.DEFAULT);\n      const randomFieldId = getRandomInt(defaultFields.length - 1);\n      const field = defaultFields[randomFieldId];\n      this.highlightSquare(field.id);\n      await this.setState({ highlightedFieldId: field.id });\n    };\n    return setInterval(gameIteration, this.props.gameConfig.mode.delay);\n  };\n\n  // Clear game session interval.\n  pauseGame = () => {\n    clearInterval(this.state.intervalId);\n  };\n\n  // Changes game status to FINISHED in the redux store, updates winners list and\n  // lastWinner prop.\n  finishGame = (winner) => {\n    clearInterval(this.state.intervalId);\n    this.props.setGameStatus(gameStatuses.FINISHED);\n    const winnerName =\n      winner === playerTypes.USER ? this.props.gameConfig.playerName : winner;\n    const winnerObj = {\n      name: winnerName,\n      type: winner,\n      date: moment().format('h:mm:ss a; MMMM Do YYYY'),\n    };\n    this.props.updateWinners(winnerObj);\n  };\n\n  render() {\n    return (\n      <div\n        className={`game-field ${\n          this.props.gameStatus && this.props.gameStatus === gameStatuses.STARTED\n            ? ''\n            : 'disabled'\n        }`}\n      >\n        {this.state.fieldsMatrix.map((el) => {\n          return (\n            <div\n              className=\"game-field__row\"\n              key={this.state.fieldsMatrix.indexOf(el)}\n            >\n              {el.map((el) => {\n                // Set square color status, depending on it's status\n                let color;\n                switch (el.status) {\n                  case fieldSquareStatuses.DEFAULT:\n                    color = colorsConfig.GREY;\n                    break;\n                  case fieldSquareStatuses.HIGHLIGHTED:\n                    color = colorsConfig.BLUE;\n                    break;\n\n                  case fieldSquareStatuses.TAKEN:\n                    color = colorsConfig.GREEN;\n                    break;\n\n                  case fieldSquareStatuses.LOST:\n                    color = colorsConfig.RED;\n                    break;\n\n                  default:\n                    color = colorsConfig.GREY;\n                    break;\n                }\n                return (\n                  <Square\n                    id={el.id}\n                    color={color}\n                    key={el.id}\n                    animation={el.animation}\n                    onClick={this.onSquareClick}\n                    onMouseOver={this.onMouseOverSquare}\n                    onAnimationEnd={this.onAnimationEnd}\n                  />\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gameConfig: state.game.gameConfig,\n  gameStatus: state.game.gameStatus,\n  loading: state.game.loading,\n});\n\nconst MapDispatchToProps = {\n  setGameStatus: gameActions.setGameStatus,\n  updateWinners: gameOperations.updateWinners,\n};\n\nexport default connect(mapStateToProps, MapDispatchToProps)(Field);\n","export default function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Field from '../Field/Field';\nimport './Game.scss';\nimport gameStatuses from '../../../configs/gameStatuses';\nimport playerTypes from '../../../configs/playerTypes';\n\nconst gameMessages = Object.freeze({\n  beforeStart: `Let's play, fellow!`,\n  gameIsGoing: 'Good luck, mate!',\n  resumeGame: `Don't stop, mate!`,\n  gameIsWon: `Wow! You've beated me! Crazy guy!`,\n  gameOver: `Oops, You've Lost! Wanna try again?`,\n});\n\nfunction Game(props) {\n  // Define a game message depending on the game status.\n  let message;\n  switch (props.gameStatus) {\n    case gameStatuses.INITIAL:\n      message = gameMessages.beforeStart;\n      break;\n    case gameStatuses.PAUSED:\n      message = gameMessages.resumeGame;\n      break;\n    case gameStatuses.STARTED:\n      message = gameMessages.gameIsGoing;\n      break;\n    case gameStatuses.FINISHED:\n      if (props.lastWinner === playerTypes.COMPUTER) {\n        message = gameMessages.gameOver;\n      } else if (props.lastWinner === playerTypes.USER) {\n        message = gameMessages.gameIsWon;\n      }\n      break;\n    default:\n      message = gameMessages.beforeStart;\n      break;\n  }\n  return (\n    <div className=\"game__wrapper\">\n      <h2 className=\"game__message\">{message}</h2>\n      <Field />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  gameStatus: state.game.gameStatus,\n  lastWinner: state.game.lastWinner,\n});\n\nexport default connect(mapStateToProps)(Game);\n","import Game from './Game';\nexport default Game;\n","import React from 'react';\nimport ControlPanel from '../components/game/ControlPanel/';\nimport Game from '../components/game/Game/';\nimport './GameScreen.scss';\n\nexport default function GameScreen() {\n  return (\n    <>\n      <header className=\"game-screen__header\">\n        <ControlPanel />\n      </header>\n      <main className=\"game-screen__content\">\n        <Game />\n      </main>\n    </>\n  );\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './Table.scss';\nimport { gameOperations } from '../../store/game';\n\nclass Table extends Component {\n  async componentDidMount() {\n    await this.props.requestWinners();\n  }\n  render() {\n    return (\n      <ul className=\"leaders-table\">\n        {this.props.winners &&\n          this.props.winners.reverse().map((el) => {\n            return (\n              <li className=\"leaders-table__row\" key={el.id}>\n                <span className=\"leaders-table__text name\">{el.winner}</span>\n                <span className=\"leaders-table__text date\">{el.date}</span>\n              </li>\n            );\n          })}\n      </ul>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  winners: state.game.winners,\n});\n\nconst mapDispatchToProps = {\n  requestWinners: gameOperations.requestWinners,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport Table from '../components/leader-board/Table';\nimport './LeaderBoardScreen.scss';\n\nexport default function LeaderBoardScreen() {\n  return (\n    <div className=\"leader-board\">\n      <h2 className=\"leader-board__title\">Leader Board</h2>\n      <Table />\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.scss';\n\nimport GameScreen from './screens/GameScreen';\nimport LeaderBoardScreen from './screens/LeaderBoardScreen';\n\nfunction App() {\n  return (\n    <main className=\"base-layout\">\n      <section className=\"base-layout__section\">\n        <GameScreen />\n      </section>\n      <section className=\"base-layout__section\">\n        <LeaderBoardScreen />\n      </section>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\nimport types from './gameActionsTypes';\nimport GAME_STATUSES from '../../configs/gameStatuses';\n\nconst INITIAL_GAME_CONFIG = Object.freeze({\n  mode: {\n    field: 5,\n    delay: 2000,\n  },\n  playerName: '',\n});\n\nfunction gameConfigReducer(state = { ...INITIAL_GAME_CONFIG }, { type, payload }) {\n  switch (type) {\n    case types.SET_GAME_CONFIG:\n      return { ...state, ...payload };\n\n    default:\n      return state;\n  }\n}\n\nfunction gameStatusReducer(state = GAME_STATUSES.INITIAL, { type, payload }) {\n  switch (type) {\n    case types.SET_GAME_STATUS:\n      return payload;\n\n    default:\n      return state;\n  }\n}\n\nfunction winnersReducer(state = [], { type, payload }) {\n  switch (type) {\n    case types.UPDATE_WINNERS:\n      return [...payload];\n\n    default:\n      return state;\n  }\n}\n\nfunction lastWinnerReducer(state = null, { type, payload }) {\n  switch (type) {\n    case types.SET_LAST_WINNER:\n      return payload;\n\n    default:\n      return state;\n  }\n}\n\nfunction availableSettingsReducer(state = null, { type, payload }) {\n  switch (type) {\n    case types.GET_AVAILABLE_SETTINGS:\n      return payload;\n\n    default:\n      return state;\n  }\n}\n\nfunction loadingReducer(state = false, { type }) {\n  switch (type) {\n    case types.FETCH_REQUEST:\n      return true;\n\n    case types.FETCH_SUCCESS:\n    case types.FETCH_ERROR:\n      return false;\n\n    default:\n      return state;\n  }\n}\n\nfunction errorReducer(state = null, { type, payload }) {\n  switch (type) {\n    case types.FETCH_REQUEST:\n      return null;\n\n    case types.FETCH_ERROR:\n      return payload;\n\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  gameConfig: gameConfigReducer,\n  gameStatus: gameStatusReducer,\n  availableSettings: availableSettingsReducer,\n  winners: winnersReducer,\n  lastWinner: lastWinnerReducer,\n  loading: loadingReducer,\n  error: errorReducer,\n});\n","import { combineReducers } from 'redux';\nimport gameReducers from './game/gameReducers';\n\nexport default combineReducers({\n  game: gameReducers,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport rootModule from './rootModule';\n\nconst middlewares = applyMiddleware(thunk);\nconst enhancer = composeWithDevTools(middlewares);\n\nconst store = createStore(rootModule, enhancer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}